@{
    ViewData["Title"] = "Home Page";
    const string DIRTY_STRING = "DIRTY_STRING";
}

@using HtmlHelperReplacement.Services
@using HtmlHelperReplacement
@inject ICleaningService cleaningService

<div class="container">
    <row>
        <div class="card">
            <div class="card-body good">
                <h5 class="card-title">@@await cleaningService.GetCleanStringAsync("DIRTY_STRING")</h5>
                <h6>Result: @await cleaningService.GetCleanStringAsync("DIRTY_STRING")</h6>
                <p class="card-text">Injected Cleaning Service called async and correctly using await</p>
            </div>
        </div>
    </row>
    <row>
        <div class="card">
            <div class="card-body bad">
                <h5 class="card-title">@@cleaningService.GetCleanStringAsync(DIRTY_STRING)</h5>
                <h6>Result: @cleaningService.GetCleanStringAsync(DIRTY_STRING)</h6>
                <p class="card-text">Injected Cleaning Service called async and forgetting to use await in the View</p>
            </div>
        </div>
    </row>
    <row>
        <div class="card">
            <div class="card-body bad">
                <h5 class="card-title">
                    @@Html.GetCleanString(DIRTY_STRING)
                </h5>
                <h6>Result: @Html.GetCleanString(DIRTY_STRING)</h6>
                <p class="card-text">HTML Helper with Service Locator</p>
            </div>
        </div>
    </row>
    <row>
        <div class="card">
            <div class="card-body bad">
                <h5 class="card-title">@@cleaningService.GetCleanString(DIRTY_STRING)</h5>
                <h6>Result: @cleaningService.GetCleanString(DIRTY_STRING)</h6>
                <p class="card-text">Injected Cleaning Service called synchronously</p>
            </div>
        </div>
    </row>
    
    
</div>
